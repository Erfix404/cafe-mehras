{"ast":null,"code":"var _jsxFileName = \"E:\\\\cafe mehras\\\\src\\\\components\\\\common\\\\AnimatedPrice.jsx\",\n  _s = $RefreshSig$();\n// src/components/common/AnimatedPrice.jsx\nimport React, { useRef, useEffect } from \"react\";\nimport { useInView, animate } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedPrice = ({\n  value\n}) => {\n  _s();\n  const ref = useRef(null);\n  // Trigger animation only when the element is in view\n  const isInView = useInView(ref, {\n    once: true,\n    margin: \"-50px\"\n  });\n  useEffect(() => {\n    if (isInView && ref.current) {\n      const node = ref.current;\n      // Animate from 0 to the target value\n      const controls = animate(0, value, {\n        duration: 1.2,\n        ease: \"easeOut\",\n        onUpdate: latest => {\n          // Update the text content on each frame\n          if (node) {\n            node.textContent = Math.round(latest).toLocaleString(\"fa-IR\");\n          }\n        }\n      });\n      return () => controls.stop();\n    }\n  }, [isInView, value]);\n\n  // Start with 0, animation will update it\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    ref: ref,\n    children: \"0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_s(AnimatedPrice, \"aIj2rGFwktnr9pBb+biOnOSDeRU=\", false, function () {\n  return [useInView];\n});\n_c = AnimatedPrice;\nexport default AnimatedPrice;\nvar _c;\n$RefreshReg$(_c, \"AnimatedPrice\");","map":{"version":3,"names":["React","useRef","useEffect","useInView","animate","jsxDEV","_jsxDEV","AnimatedPrice","value","_s","ref","isInView","once","margin","current","node","controls","duration","ease","onUpdate","latest","textContent","Math","round","toLocaleString","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/cafe mehras/src/components/common/AnimatedPrice.jsx"],"sourcesContent":["// src/components/common/AnimatedPrice.jsx\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { useInView, animate } from \"framer-motion\";\r\n\r\nconst AnimatedPrice = ({ value }) => {\r\n  const ref = useRef(null);\r\n  // Trigger animation only when the element is in view\r\n  const isInView = useInView(ref, { once: true, margin: \"-50px\" });\r\n\r\n  useEffect(() => {\r\n    if (isInView && ref.current) {\r\n      const node = ref.current;\r\n      // Animate from 0 to the target value\r\n      const controls = animate(0, value, {\r\n        duration: 1.2,\r\n        ease: \"easeOut\",\r\n        onUpdate: (latest) => {\r\n          // Update the text content on each frame\r\n          if (node) {\r\n            node.textContent = Math.round(latest).toLocaleString(\"fa-IR\");\r\n          }\r\n        },\r\n      });\r\n      return () => controls.stop();\r\n    }\r\n  }, [isInView, value]);\r\n\r\n  // Start with 0, animation will update it\r\n  return <span ref={ref}>0</span>;\r\n};\r\n\r\nexport default AnimatedPrice;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,SAAS,EAAEC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,GAAG,GAAGT,MAAM,CAAC,IAAI,CAAC;EACxB;EACA,MAAMU,QAAQ,GAAGR,SAAS,CAACO,GAAG,EAAE;IAAEE,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEhEX,SAAS,CAAC,MAAM;IACd,IAAIS,QAAQ,IAAID,GAAG,CAACI,OAAO,EAAE;MAC3B,MAAMC,IAAI,GAAGL,GAAG,CAACI,OAAO;MACxB;MACA,MAAME,QAAQ,GAAGZ,OAAO,CAAC,CAAC,EAAEI,KAAK,EAAE;QACjCS,QAAQ,EAAE,GAAG;QACbC,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAGC,MAAM,IAAK;UACpB;UACA,IAAIL,IAAI,EAAE;YACRA,IAAI,CAACM,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAACI,cAAc,CAAC,OAAO,CAAC;UAC/D;QACF;MACF,CAAC,CAAC;MACF,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACd,QAAQ,EAAEH,KAAK,CAAC,CAAC;;EAErB;EACA,oBAAOF,OAAA;IAAMI,GAAG,EAAEA,GAAI;IAAAgB,QAAA,EAAC;EAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACjC,CAAC;AAACrB,EAAA,CAzBIF,aAAa;EAAA,QAGAJ,SAAS;AAAA;AAAA4B,EAAA,GAHtBxB,aAAa;AA2BnB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}