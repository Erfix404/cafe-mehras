{"ast":null,"code":"var _jsxFileName = \"E:\\\\cafe mehras\\\\src\\\\context\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/ThemeContext.jsx\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(null);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // State is now initialized directly from localStorage to prevent any delay or flicker.\n  // This is a more robust way to handle initial theme loading.\n  const [theme, setTheme] = useState(() => {\n    // Check for a saved theme in localStorage, or default to 'dark'.\n    const storedTheme = localStorage.getItem(\"theme\");\n    return storedTheme || \"dark\";\n  });\n  useEffect(() => {\n    const root = window.document.documentElement; // This is the <html> tag\n\n    // A more direct approach:\n    // Remove the opposite class and add the current one.\n    // This is more explicit than using toggle().\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n\n    // Save the current theme choice to localStorage for persistence.\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]); // This effect runs every time the 'theme' state changes.\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"EWN+ZMiQ9XPgTJpE0HluT9q3VzA=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","useState","useEffect","useContext","createContext","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","storedTheme","localStorage","getItem","root","window","document","documentElement","classList","add","remove","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["E:/cafe mehras/src/context/ThemeContext.jsx"],"sourcesContent":["// src/context/ThemeContext.jsx\r\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\r\n\r\nconst ThemeContext = createContext(null);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // State is now initialized directly from localStorage to prevent any delay or flicker.\r\n  // This is a more robust way to handle initial theme loading.\r\n  const [theme, setTheme] = useState(() => {\r\n    // Check for a saved theme in localStorage, or default to 'dark'.\r\n    const storedTheme = localStorage.getItem(\"theme\");\r\n    return storedTheme || \"dark\";\r\n  });\r\n\r\n  useEffect(() => {\r\n    const root = window.document.documentElement; // This is the <html> tag\r\n\r\n    // A more direct approach:\r\n    // Remove the opposite class and add the current one.\r\n    // This is more explicit than using toggle().\r\n    if (theme === \"dark\") {\r\n      root.classList.add(\"dark\");\r\n    } else {\r\n      root.classList.remove(\"dark\");\r\n    }\r\n\r\n    // Save the current theme choice to localStorage for persistence.\r\n    localStorage.setItem(\"theme\", theme);\r\n  }, [theme]); // This effect runs every time the 'theme' state changes.\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => useContext(ThemeContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,aAAa,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGH,aAAa,CAAC,IAAI,CAAC;AAExC,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMY,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,OAAOF,WAAW,IAAI,MAAM;EAC9B,CAAC,CAAC;EAEFX,SAAS,CAAC,MAAM;IACd,MAAMc,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACC,eAAe,CAAC,CAAC;;IAE9C;IACA;IACA;IACA,IAAIR,KAAK,KAAK,MAAM,EAAE;MACpBK,IAAI,CAACI,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAC5B,CAAC,MAAM;MACLL,IAAI,CAACI,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IAC/B;;IAEA;IACAR,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,oBACEL,OAAA,CAACC,YAAY,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,KAAK;MAAEC;IAAS,CAAE;IAAAH,QAAA,EAC/CA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACnB,EAAA,CA9BWF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAgC1B,OAAO,MAAMuB,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7B,UAAU,CAACI,YAAY,CAAC;AAAA;AAACyB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}