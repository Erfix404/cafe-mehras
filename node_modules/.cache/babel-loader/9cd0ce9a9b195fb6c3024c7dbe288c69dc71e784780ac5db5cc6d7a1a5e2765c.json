{"ast":null,"code":"var _jsxFileName = \"E:\\\\cafe mehras\\\\src\\\\context\\\\CartContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/CartContext.jsx\nimport React, { useReducer, useEffect, useState, useContext, createContext } from \"react\";\n\n// Actions for the cart reducer, kept here for simplicity\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CART_ACTIONS = {\n  SET_FROM_STORAGE: \"SET_FROM_STORAGE\",\n  ADD: \"ADD\",\n  UPDATE_QUANTITY: \"UPDATE_QUANTITY\",\n  REMOVE: \"REMOVE\",\n  CLEAR: \"CLEAR\",\n  SET_IS_CART_OPEN: \"SET_IS_CART_OPEN\"\n};\nconst CartContext = /*#__PURE__*/createContext(null);\nconst initialCartState = {\n  cartItems: [],\n  isCartOpen: false\n};\n\n// The reducer function handles all state changes for the cart\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    case CART_ACTIONS.SET_FROM_STORAGE:\n      return {\n        ...state,\n        cartItems: action.payload\n      };\n    case CART_ACTIONS.ADD:\n      {\n        const {\n          item,\n          quantity\n        } = action.payload;\n        const existingItem = state.cartItems.find(i => i.id === item.id);\n        if (existingItem) {\n          // If item exists, just increase quantity\n          return {\n            ...state,\n            cartItems: state.cartItems.map(i => i.id === item.id ? {\n              ...i,\n              quantity: i.quantity + quantity\n            } : i)\n          };\n        }\n        // Otherwise, add new item to cart\n        return {\n          ...state,\n          cartItems: [...state.cartItems, {\n            ...item,\n            quantity\n          }]\n        };\n      }\n    case CART_ACTIONS.UPDATE_QUANTITY:\n      {\n        const {\n          itemId,\n          newQuantity\n        } = action.payload;\n        // If quantity is less than 1, remove the item\n        if (newQuantity < 1) {\n          return {\n            ...state,\n            cartItems: state.cartItems.filter(i => i.id !== itemId)\n          };\n        }\n        return {\n          ...state,\n          cartItems: state.cartItems.map(i => i.id === itemId ? {\n            ...i,\n            quantity: newQuantity\n          } : i)\n        };\n      }\n    case CART_ACTIONS.REMOVE:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(i => i.id !== action.payload.itemId)\n      };\n    case CART_ACTIONS.CLEAR:\n      return {\n        ...state,\n        cartItems: []\n      };\n    case CART_ACTIONS.SET_IS_CART_OPEN:\n      return {\n        ...state,\n        isCartOpen: action.payload\n      };\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialCartState);\n  const [flyingItems, setFlyingItems] = useState([]);\n\n  // Load cart from localStorage on initial render\n  useEffect(() => {\n    try {\n      const storedCart = localStorage.getItem(\"cartItems\");\n      if (storedCart) {\n        dispatch({\n          type: CART_ACTIONS.SET_FROM_STORAGE,\n          payload: JSON.parse(storedCart)\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to parse cart from localStorage\", error);\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n  }, [state.cartItems]);\n\n  // --- Cart Actions ---\n  const addToCart = (item, quantity = 1, imageElement = null) => {\n    if (imageElement) {\n      const rect = imageElement.getBoundingClientRect();\n      setFlyingItems(prev => [...prev, {\n        ...item,\n        instanceId: Date.now(),\n        startRect: rect\n      }]);\n    }\n    dispatch({\n      type: CART_ACTIONS.ADD,\n      payload: {\n        item,\n        quantity\n      }\n    });\n  };\n  const removeFromCart = itemId => dispatch({\n    type: CART_ACTIONS.REMOVE,\n    payload: {\n      itemId\n    }\n  });\n  const updateQuantity = (itemId, newQuantity) => dispatch({\n    type: CART_ACTIONS.UPDATE_QUANTITY,\n    payload: {\n      itemId,\n      newQuantity\n    }\n  });\n  const clearCart = () => dispatch({\n    type: CART_ACTIONS.CLEAR\n  });\n  const setIsCartOpen = isOpen => dispatch({\n    type: CART_ACTIONS.SET_IS_CART_OPEN,\n    payload: isOpen\n  });\n  const removeFlyingItem = instanceId => {\n    setFlyingItems(prev => prev.filter(i => i.instanceId !== instanceId));\n  };\n\n  // --- Calculated Values ---\n  const totalItems = state.cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const totalPrice = state.cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const value = {\n    ...state,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    totalItems,\n    totalPrice,\n    flyingItems,\n    removeFlyingItem,\n    setIsCartOpen\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"HlzAEgysgUou59BFkVxyN9P4r7M=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","useEffect","useState","useContext","createContext","jsxDEV","_jsxDEV","CART_ACTIONS","SET_FROM_STORAGE","ADD","UPDATE_QUANTITY","REMOVE","CLEAR","SET_IS_CART_OPEN","CartContext","initialCartState","cartItems","isCartOpen","cartReducer","state","action","type","payload","item","quantity","existingItem","find","i","id","map","itemId","newQuantity","filter","Error","CartProvider","children","_s","dispatch","flyingItems","setFlyingItems","storedCart","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addToCart","imageElement","rect","getBoundingClientRect","prev","instanceId","Date","now","startRect","removeFromCart","updateQuantity","clearCart","setIsCartOpen","isOpen","removeFlyingItem","totalItems","reduce","sum","totalPrice","price","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["E:/cafe mehras/src/context/CartContext.jsx"],"sourcesContent":["// src/context/CartContext.jsx\r\nimport React, {\r\n  useReducer,\r\n  useEffect,\r\n  useState,\r\n  useContext,\r\n  createContext,\r\n} from \"react\";\r\n\r\n// Actions for the cart reducer, kept here for simplicity\r\nconst CART_ACTIONS = {\r\n  SET_FROM_STORAGE: \"SET_FROM_STORAGE\",\r\n  ADD: \"ADD\",\r\n  UPDATE_QUANTITY: \"UPDATE_QUANTITY\",\r\n  REMOVE: \"REMOVE\",\r\n  CLEAR: \"CLEAR\",\r\n  SET_IS_CART_OPEN: \"SET_IS_CART_OPEN\",\r\n};\r\n\r\nconst CartContext = createContext(null);\r\n\r\nconst initialCartState = {\r\n  cartItems: [],\r\n  isCartOpen: false,\r\n};\r\n\r\n// The reducer function handles all state changes for the cart\r\nfunction cartReducer(state, action) {\r\n  switch (action.type) {\r\n    case CART_ACTIONS.SET_FROM_STORAGE:\r\n      return { ...state, cartItems: action.payload };\r\n\r\n    case CART_ACTIONS.ADD: {\r\n      const { item, quantity } = action.payload;\r\n      const existingItem = state.cartItems.find((i) => i.id === item.id);\r\n      if (existingItem) {\r\n        // If item exists, just increase quantity\r\n        return {\r\n          ...state,\r\n          cartItems: state.cartItems.map((i) =>\r\n            i.id === item.id ? { ...i, quantity: i.quantity + quantity } : i\r\n          ),\r\n        };\r\n      }\r\n      // Otherwise, add new item to cart\r\n      return {\r\n        ...state,\r\n        cartItems: [...state.cartItems, { ...item, quantity }],\r\n      };\r\n    }\r\n\r\n    case CART_ACTIONS.UPDATE_QUANTITY: {\r\n      const { itemId, newQuantity } = action.payload;\r\n      // If quantity is less than 1, remove the item\r\n      if (newQuantity < 1) {\r\n        return {\r\n          ...state,\r\n          cartItems: state.cartItems.filter((i) => i.id !== itemId),\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.map((i) =>\r\n          i.id === itemId ? { ...i, quantity: newQuantity } : i\r\n        ),\r\n      };\r\n    }\r\n\r\n    case CART_ACTIONS.REMOVE:\r\n      return {\r\n        ...state,\r\n        cartItems: state.cartItems.filter(\r\n          (i) => i.id !== action.payload.itemId\r\n        ),\r\n      };\r\n\r\n    case CART_ACTIONS.CLEAR:\r\n      return { ...state, cartItems: [] };\r\n\r\n    case CART_ACTIONS.SET_IS_CART_OPEN:\r\n      return { ...state, isCartOpen: action.payload };\r\n\r\n    default:\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, initialCartState);\r\n  const [flyingItems, setFlyingItems] = useState([]);\r\n\r\n  // Load cart from localStorage on initial render\r\n  useEffect(() => {\r\n    try {\r\n      const storedCart = localStorage.getItem(\"cartItems\");\r\n      if (storedCart) {\r\n        dispatch({\r\n          type: CART_ACTIONS.SET_FROM_STORAGE,\r\n          payload: JSON.parse(storedCart),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to parse cart from localStorage\", error);\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\r\n  }, [state.cartItems]);\r\n\r\n  // --- Cart Actions ---\r\n  const addToCart = (item, quantity = 1, imageElement = null) => {\r\n    if (imageElement) {\r\n      const rect = imageElement.getBoundingClientRect();\r\n      setFlyingItems((prev) => [\r\n        ...prev,\r\n        { ...item, instanceId: Date.now(), startRect: rect },\r\n      ]);\r\n    }\r\n    dispatch({ type: CART_ACTIONS.ADD, payload: { item, quantity } });\r\n  };\r\n\r\n  const removeFromCart = (itemId) =>\r\n    dispatch({ type: CART_ACTIONS.REMOVE, payload: { itemId } });\r\n  const updateQuantity = (itemId, newQuantity) =>\r\n    dispatch({\r\n      type: CART_ACTIONS.UPDATE_QUANTITY,\r\n      payload: { itemId, newQuantity },\r\n    });\r\n  const clearCart = () => dispatch({ type: CART_ACTIONS.CLEAR });\r\n  const setIsCartOpen = (isOpen) =>\r\n    dispatch({ type: CART_ACTIONS.SET_IS_CART_OPEN, payload: isOpen });\r\n\r\n  const removeFlyingItem = (instanceId) => {\r\n    setFlyingItems((prev) => prev.filter((i) => i.instanceId !== instanceId));\r\n  };\r\n\r\n  // --- Calculated Values ---\r\n  const totalItems = state.cartItems.reduce(\r\n    (sum, item) => sum + item.quantity,\r\n    0\r\n  );\r\n  const totalPrice = state.cartItems.reduce(\r\n    (sum, item) => sum + item.price * item.quantity,\r\n    0\r\n  );\r\n\r\n  const value = {\r\n    ...state,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    totalItems,\r\n    totalPrice,\r\n    flyingItems,\r\n    removeFlyingItem,\r\n    setIsCartOpen,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}